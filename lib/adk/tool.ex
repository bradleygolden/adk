defmodule Adk.Tool do
  @moduledoc """
  Behavior and utilities for implementing tools in the ADK framework.
  """

  @typedoc """
  Context map passed to the `execute/2` callback.

  Fields:
  * `:session_id` - The ID of the current session.
  * `:invocation_id` - The ID of the current top-level `Adk.run` invocation (optional).
  * `:tool_call_id` - The ID generated by the model for this specific tool call (optional).
  """
  @type context :: %{
          session_id: String.t(),
          invocation_id: String.t() | nil,
          tool_call_id: String.t() | nil
          # Add other context fields as needed
        }

  @doc """
  Execute the tool with the provided parameters and context.
  """
  @callback execute(params :: map(), context :: context()) ::
              {:ok, any()} | {:error, reason :: term()}
  # Note: The error tuple structure is simplified to just {:error, reason}

  @doc """
  Get the tool's definition.

  Returns a map containing:
  * `:name` (required, String.t) - The name the LLM should use to call the tool.
  * `:description` (required, String.t) - A description for the LLM explaining what the tool does.
  * `:parameters` (required, map) - A JSON Schema map describing the input parameters.
  * `:output_schema` (optional, map | nil) - A JSON Schema map describing the output structure.
  * `:long_running?` (optional, boolean, default: false) - Indicates if the tool might take significant time.
  """
  @callback definition() :: %{
              required(:name) => String.t(),
              required(:description) => String.t(),
              required(:parameters) => map(),
              optional(:output_schema) => map() | nil,
              optional(:long_running?) => boolean()
            }

  # Removed the public Adk.Tool.execute/2 helper.
  # Execution should now go through Adk.ToolRegistry.execute_tool/3

  @doc """
  Macro to implement common tool functionality.
  """
  defmacro __using__(_opts) do
    quote do
      @behaviour Adk.Tool

      # Default implementations
      @impl Adk.Tool
      def definition do
        %{
          name: module_name_to_string(__MODULE__),
          description: "No description provided",
          parameters: %{}
        }
      end

      # Helper to convert module name to string
      defp module_name_to_string(module) do
        module
        |> to_string()
        |> String.replace(~r/^Elixir\./, "")
        |> String.split(".")
        |> List.last()
        |> Macro.underscore()
      end

      # Allow overriding default implementations
      defoverridable definition: 0
    end
  end
end
